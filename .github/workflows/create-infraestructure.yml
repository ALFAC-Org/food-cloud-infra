name: AWS - Create Infrastructure

on:
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      VPC_CIDR_BLOCK: ${{ secrets.VPC_CIDR_BLOCK }}
      SUBNET_PUBLIC_1_CIDR_BLOCK: ${{ secrets.SUBNET_PUBLIC_1_CIDR_BLOCK }}
      SUBNET_PUBLIC_2_CIDR_BLOCK: ${{ secrets.SUBNET_PUBLIC_2_CIDR_BLOCK }}
      SUBNET_PRIVATE_1_CIDR_BLOCK: ${{ secrets.SUBNET_PRIVATE_1_CIDR_BLOCK }}
      SUBNET_PRIVATE_2_CIDR_BLOCK: ${{ secrets.SUBNET_PRIVATE_2_CIDR_BLOCK }}
      SUBNET_DATABASE_1_CIDR_BLOCK: ${{ secrets.SUBNET_DATABASE_1_CIDR_BLOCK }}
      SUBNET_DATABASE_2_CIDR_BLOCK: ${{ secrets.SUBNET_DATABASE_2_CIDR_BLOCK }}
      SUBNET_AVAILABILITY_ZONE_AZ_1 : ${{ secrets.SUBNET_AVAILABILITY_ZONE_AZ_1  }}
      SUBNET_AVAILABILITY_ZONE_AZ_2 : ${{ secrets.SUBNET_AVAILABILITY_ZONE_AZ_2  }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install AWS CLI
      id: check_aws_cli
      run: |
        if ! command -v aws &> /dev/null; then
          echo "AWS CLI not found, installing..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
        else
          echo "AWS CLI is already installed"
        fi

    - name: Create S3 Bucket if it does not exist
      run: |
        if aws s3api head-bucket --bucket "${{ secrets.AWS_BUCKET_NAME }}" 2>/dev/null; then
          echo "Bucket already exists."
        else
          aws s3api create-bucket --bucket "${{ secrets.AWS_BUCKET_NAME }}" --region "${{ secrets.AWS_REGION }}"
        fi

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init -upgrade

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: |
        terraform plan \
        -var "node_role_arn=${{ secrets.NODE_ROLE_ARN }}" \
        -var "region=${{ secrets.AWS_REGION }}" \
        -var "vpc_cidr_block=${{ secrets.VPC_CIDR_BLOCK }}" \
        -var "subnet_private_1_cidr_block=${{ secrets.SUBNET_PRIVATE_1_CIDR_BLOCK }}" \
        -var "subnet_private_2_cidr_block=${{ secrets.SUBNET_PRIVATE_2_CIDR_BLOCK }}" \
        -var "subnet_public_1_cidr_block=${{ secrets.SUBNET_PUBLIC_1_CIDR_BLOCK }}" \
        -var "subnet_public_2_cidr_block=${{ secrets.SUBNET_PUBLIC_2_CIDR_BLOCK }}" \
        -var "subnet_database_1_cidr_block=${{ secrets.SUBNET_DATABASE_1_CIDR_BLOCK }}" \
        -var "subnet_database_2_cidr_block=${{ secrets.SUBNET_DATABASE_2_CIDR_BLOCK }}" \
        -var "subnet_availability_zone_az_1=${{ secrets.SUBNET_AVAILABILITY_ZONE_AZ_1 }}" \
        -var "subnet_availability_zone_az_2=${{ secrets.SUBNET_AVAILABILITY_ZONE_AZ_2 }}" \
        -var "db_username=${{ secrets.DB_USERNAME }}" \
        -var "db_password=${{ secrets.DB_PASSWORD }}" \
        -var "image_version=latest"

    - name: Terraform Apply
      # if: github.ref == 'refs/heads/main'
      run: |
        terraform apply -auto-approve \
        -var "node_role_arn=${{ secrets.NODE_ROLE_ARN }}" \
        -var "region=${{ secrets.AWS_REGION }}" \
        -var "vpc_cidr_block=${{ secrets.VPC_CIDR_BLOCK }}" \
        -var "subnet_private_1_cidr_block=${{ secrets.SUBNET_PRIVATE_1_CIDR_BLOCK }}" \
        -var "subnet_private_2_cidr_block=${{ secrets.SUBNET_PRIVATE_2_CIDR_BLOCK }}" \
        -var "subnet_public_1_cidr_block=${{ secrets.SUBNET_PUBLIC_1_CIDR_BLOCK }}" \
        -var "subnet_public_2_cidr_block=${{ secrets.SUBNET_PUBLIC_2_CIDR_BLOCK }}" \
        -var "subnet_database_1_cidr_block=${{ secrets.SUBNET_DATABASE_1_CIDR_BLOCK }}" \
        -var "subnet_database_2_cidr_block=${{ secrets.SUBNET_DATABASE_2_CIDR_BLOCK }}" \
        -var "subnet_availability_zone_az_1=${{ secrets.SUBNET_AVAILABILITY_ZONE_AZ_1 }}" \
        -var "subnet_availability_zone_az_2=${{ secrets.SUBNET_AVAILABILITY_ZONE_AZ_2 }}" \
        -var "db_username=${{ secrets.DB_USERNAME }}" \
        -var "db_password=${{ secrets.DB_PASSWORD }}" \
        -var "image_version=latest"